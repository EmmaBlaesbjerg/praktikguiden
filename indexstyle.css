@import url('https://fonts.googleapis.com/css?family=Open+Sans:300&display=swap');

body{
	font-family: 'Open Sans', sans-serif;
	height: 0px;
}


/*Forside billede*/
.forsideimg{
width: 60%;
background-image: url("images/index/forside.png");
background-position: center 80px;
	background-size: contain;
	background-repeat: no-repeat;
	height: 100vh;
	margin: auto;
	margin-bottom: 0;
	   
}

@media screen and (max-width: 800px) {
  .forsideimg {
     height: 300px;
	}
	.scroll-downs{
	display: none;
	}
}

/*Mouse scroll style*/
.scroll-downs {
	bottom: 50px;
	top: 80%;
	position: absolute;
	left: 50%;
   max-width: 70px;
  margin: 0 auto;
  width :34px;
  height: 55px;
}
.mousey {
  width: 3px;
  padding: 10px 15px;
  height: 35px;
  border: 2px solid black;
  border-radius: 25px;
  opacity: 0.75;
  box-sizing: content-box;
}
.scroller {
  width: 3px;
  height: 10px;
  border-radius: 25%;
  background-color: black;
  animation-name: scroll;
  animation-duration: 2.2s;
  animation-timing-function: cubic-bezier(.15,.41,.69,.94);
  animation-iteration-count: infinite;
}



@keyframes scroll {
  0% { opacity: 0; }
  10% { transform: translateY(0); opacity: 1; }
  100% { transform: translateY(15px); opacity: 0;}
}

/*Om os*/
/* center the blockquote in the page */
.blockquote-wrapper {
   display: flex;
   padding: 0 20px;
	
	
}

/*Header*/
.omos{
	font-family: Blankid;
	font-size: 90px;
	
}

/* Blockquote main style */
.blockquote {
    position: relative;
    font-family: open sans;
    max-width: 820px;
    margin: 80px auto;
    align-self: center;
}

/* Blockquote header */
.blockquote h4 {
    font-family: open sans;
    position: relative; /* for pseudos */
    font-weight: normal;
    line-height: 1;
    margin: 0;
    border: 1.5px solid #fff;
    border: solid 1px;
    border-radius:20px;
    padding: 40px;
	padding-top: 60px;
}

/* Blockquote right double quotes */
.blockquote h4:after {
    content:"";
    position: absolute;
    border: 1.5px solid black;
    border-radius: 0 50px 0 0;
    width: 60px;
    height: 60px;
    bottom: -62px;
    left: 50px;
    border-bottom: none;
    border-left: none;
    z-index: 3; 
}

.blockquote h4:before {
    content:"";
    position: absolute;
    width: 80px;
    border: 2px solid #ffffff;
    bottom: -3px;
    left: 50px;
    z-index: 2;
}

/* increase header size after 600px */
@media all and (max-width: 600px) {
	.omos{
		font-size: 30px;
	}
	

}


/*Slide show style*/
.demo-1 .sl-slider-wrapper {
	position: absolute;
	width: 100%;
	height: 85%; /*Kontrollere højden på slideshowet*/
	left: 0;
	bottom: 100px;
    top: 1800px;
	
}

.sl-slider-wrapper {
	width: 100%;
	height: 85%;
	overflow: hidden;
	position: relative;
}

.demo-2 .sl-slider h2,
.demo-2 .sl-slider blockquote {
	padding: 100px 30px 10px 30px;
	width: 85%;
	max-width: 960px;
	color: #fff;
	margin: 0 auto;
	position: relative;
	
}

.sl-slider h2 {
	font-size: 100px;
	text-shadow: 0 -1px 0 rgba(0,0,0,0.2);
}

.sl-slider blockquote {
	font-size: 28px;
	padding-top: 10px;
	font-weight: 300;
	text-shadow: 0 -1px 0 rgba(0,0,0,0.2);
}

.sl-slider blockquote cite {
	font-size: 16px;
	font-weight: 700;
	font-style: normal;
	text-transform: uppercase;
	letter-spacing: 5px;
	padding-top: 30px;
	display: inline-block;
}



/* Custom navigation arrows */
/*The division with the class sl-content-wrapper will get a height and width dynamically. If, for example, the slide is horizontal, the wrapper will have a width of 100% of the parent’s container width and 50% of the parent’s container height. The wrapper of the second slice will also have a negative top (horizontal) or left (vertical) margin in order to “pull” the duplicated content up or to the left.
This is all the styling for the slider to work by default. Let’s take a look at some custom elements, like the nav items and the content elements that we’ll animate when we navigate through the slides.
For the navigation arrows we will use this image-less technique. We’ll simply have a little box and rotate it 45 degrees. Then we’ll add some border to the sides and voilà, we made ourselves some neat arrows:*/
.nav-arrows span {
	position: absolute;
	z-index: 1;
	top: 30%;
	width: 40px;
	height: 40px;
	border: 8px solid #ddd;
	border: 8px solid rgba(150,150,150,0.4);
	text-indent: 14000px;
	cursor: pointer;
	
	-webkit-transform: rotate(45deg);
	-moz-transform: rotate(45deg);
	-o-transform: rotate(45deg);
	-ms-transform: rotate(45deg);
	transform: rotate(45deg);
}

.nav-arrows span:hover {
	border-color: rgba(150,150,150,0.9);
}

.nav-arrows span.nav-arrow-prev {
	left: 5%;
	border-right: none;
	border-top: none;
}

.nav-arrows span.nav-arrow-next {
	right: 5%;
	border-left: none;
	border-bottom: none;
}


/* Content elements */
/*The elements that we’ll use in the content will be a decorative element (the image with the circles), a headline and a blockquote. We’ll use a font to give us some image that we’ll place as a pseudo element of the decorative div.
The division with the class deco, just like all the other content elements, will have an absolute position. We’ll center it horizontally and give it a bottom value of 50%:*/
.demo-1 .deco {
	width: 260px;
	height: 260px;
	border: 2px dashed #ddd;
	border: 2px dashed rgba(150,150,150,0.4);
	border-radius: 50%;
	position: absolute;
	bottom: 50%;
	left: 50%;
	margin: 0 0 0 -130px;
}
.img{
	 content: attr(data-icon);
    font-family: 'AnimalsNormal';
	color: #999;
	text-shadow: 0 0 1px #999;
	position: absolute;
	width: 220px;
	height: 220px;
	line-height: 220px;
	text-align: center;
	font-size: 100px;
	top: 50%;
	left: 50%;
	margin: -110px 0 0 -110px;
	box-shadow: inset 0 0 0 10px #f7f7f7; /*The box shadow will create a “fake” inset border.*/
	border-radius: 50%;
}
/*We use a data attribute “data-icon” in the decorative element and we’ll style the pseudo-element :after to contain the letter from the image font as its content:*/
.demo-1 [data-icon]:after {
    content: attr(data-icon);
    font-family: 'AnimalsNormal';
	color: #999;
	text-shadow: 0 0 1px #999;
	position: absolute;
	width: 220px;
	height: 220px;
	line-height: 220px;
	text-align: center;
	font-size: 100px;
	top: 50%;
	left: 50%;
	margin: -110px 0 0 -110px;
	box-shadow: inset 0 0 0 10px #f7f7f7; /*The box shadow will create a “fake” inset border.*/
	border-radius: 50%;
}

/*The headline will also be positioned absolutely and we’ll give it the same bottom value like we gave to the decorative element, which is 50%. We then add a negative bottom margin in order to place it under the other element. Like that we can use the decorative element as a reference point and position the other elements relatively to it using a negative bottom margin:*/
.demo-1 .sl-slide h2 {
	color: #000;
	text-shadow: 0 0 1px #000;
	padding: 20px;
	position: absolute;
	font-size: 34px;
	font-weight: 700;
	letter-spacing: 13px;
	text-transform: uppercase;
	width: 80%;
	left: 10%;
	text-align: center;
	line-height: 50px;
	bottom: 50%;
	margin: 0 0 -120px 0;
}
/*The blockquote will be of 100% width and we will center the paragraph inside which will have a maximum width of 400 pixel:*/
.demo-1 .sl-slide blockquote {
	position: absolute;
	width: 100%;
	text-align: center;
	left: 0;
	font-weight: 400;
	font-size: 14px;
	line-height: 20px;
	height: 70px;
	color: #8b8b8b;
	z-index: 1;
	bottom: 50%;
	margin: 0 0 -200px 0;
	padding: 0;
}

.demo-1 .sl-slide blockquote p{
	margin: 0 auto;
	width: 60%;
	max-width: 400px;
	position: relative;
}
/*Let’s add a quotation mark to the blockquote. Using the pseudo-class :before, we’ll add a over-sized quotation mark behind the blockquote:*/
.demo-1 .sl-slide blockquote p:before {
	color: #f0f0f0;
	color: rgba(244,244,244,0.65);
	font-family: "Bookman Old Style", Bookman, Garamond, serif;
	position: absolute;
	line-height: 60px;
	width: 75px;
	height: 75px;
	font-size: 200px;
	z-index: -1;
	left: -80px;
	top: 35px;
	content: '\201C';
}
/*And the cite will have a different look:*/
.demo-1 .sl-slide blockquote cite {
	font-size: 10px;
	padding-top: 10px;
	display: inline-block;
	font-style: normal;
	text-transform: uppercase;
	letter-spacing: 4px;
}

/* Custom background colors for slides in first demo */
/*Next, we’ll define some classes for controling the colors of the slides. When we give this color class to the slide, we want the background color and the color of the elements to be different. By default, our slides are white/gray and the content elements are black and gray.
We also need to give the same background color to the dynamic slice element, the one that will have a large padding:*/
/* First Slide */
.demo-1 .bg-1 .sl-slide-inner,
.demo-1 .bg-1 .sl-content-slice {
	background: #fff;
}

/* Second Slide */
.demo-1 .bg-2 .sl-slide-inner,
.demo-1 .bg-2 .sl-content-slice {
	background: #000;
}

.demo-1 .bg-2 [data-icon]:after,
.demo-1 .bg-2 h2 {
	color: #fff;
}

.demo-1 .bg-2 blockquote:before {
	color: #222;
}

/* Third Slide */
.demo-1 .bg-3 .sl-slide-inner,
.demo-1 .bg-3 .sl-content-slice {
	background: #c28282;
}

.demo-1 .bg-3 .deco {
	border-color: #fff;
	border-color: rgba(255,255,255,0.5);
}

.demo-1 .bg-3 [data-icon]:after {
	color: #fff;
	text-shadow: 0 0 1px #fff;
	box-shadow: inset 0 0 0 10px #c28282;
}

.demo-1 .bg-3 h2,
.demo-1 .bg-3 blockquote{
	color: #fff;
	text-shadow: 0px 1px 1px rgba(0,0,0,0.3);
}

.demo-1 .bg-3 blockquote:before {
	color: #c28282;
}

/* Forth Slide */
.demo-1 .bg-4 .sl-slide-inner,
.demo-1 .bg-4 .sl-content-slice {
	background: #68a8de;
}

.demo-1 .bg-4 .deco {
	border-color: #68a8de;
}

.demo-1 .bg-4 [data-icon]:after {
	text-shadow: 0 0 1px #68a8de;
	color: #277d87;
}

.demo-1 .bg-4 h2,
.demo-1 .bg-4 blockquote{
	color: #fff;
	text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
}

.demo-1 .bg-4 blockquote:before {
	color: #68a8de;
}

/* Fifth Slide */
.demo-1 .bg-5 .sl-slide-inner,
.demo-1 .bg-5 .sl-content-slice {
	background: #ffeb41;
}

.demo-1 .bg-5 .deco {
	border-color: #ECD82C;
}

.demo-1 .bg-5 .deco:after {
	color: #000;
	text-shadow: 0 0 1px #000;
}

.demo-1 .bg-5 h2,
.demo-1 .bg-5 blockquote{
	color: #000;
	text-shadow: 1px 1px 1px rgba(0,0,0,0.1);
}

.demo-1 .bg-5 blockquote:before {
	color: #ecd82c;
}



/* Animations for content elements */
/*And now, let’s add some motion to the content elements! When we navigate the slides, we want the content elements to do something fun, so we will add a class to the next slide whenever we navigate to the “right” (or “in” since this almost looks like as if we are moving further). That class will “trigger” an animation for each one of the content elements:*/
.sl-trans-elems .deco{
	-webkit-animation: roll 1s ease-out both, fadeIn 1s ease-out both;
	-moz-animation: roll 1s ease-out both, fadeIn 1s ease-out both;
	-o-animation: roll 1s ease-out both, fadeIn 1s ease-out both;
	-ms-animation: roll 1s ease-out both, fadeIn 1s ease-out both;
	animation: roll 1s ease-out both, fadeIn 1s ease-out both;
}
.sl-trans-elems h2{
	-webkit-animation: moveUp 1s ease-in-out both;
	-moz-animation: moveUp 1s ease-in-out both;
	-o-animation: moveUp 1s ease-in-out both;
	-ms-animation: moveUp 1s ease-in-out both;
	animation: moveUp 1s ease-in-out both;
}
.sl-trans-elems blockquote{
	-webkit-animation: fadeIn 0.5s linear 0.5s both;
	-moz-animation: fadeIn 0.5s linear 0.5s both;
	-o-animation: fadeIn 0.5s linear 0.5s both;
	-ms-animation: fadeIn 0.5s linear 0.5s both;
	animation: fadeIn 0.5s linear 0.5s both;
}

/*The decorative element will “roll in” from the right side, the heading will move up and the blockquote will simply fade in.
Now, when we navigate back (or “out”), we want to see the reverse happening:*/
.sl-trans-back-elems .deco{
	-webkit-animation: scaleDown 1s ease-in-out both;
	-moz-animation: scaleDown 1s ease-in-out both;
	-o-animation: scaleDown 1s ease-in-out both;
	-ms-animation: scaleDown 1s ease-in-out both;
	animation: scaleDown 1s ease-in-out both;
}
.sl-trans-back-elems h2{
	-webkit-animation: fadeOut 1s ease-in-out both;
	-moz-animation: fadeOut 1s ease-in-out both;
	-o-animation: fadeOut 1s ease-in-out both;
	-ms-animation: fadeOut 1s ease-in-out both;
	animation: fadeOut 1s ease-in-out both;
}
.sl-trans-back-elems blockquote{
	-webkit-animation: fadeOut 1s linear both;
	-moz-animation: fadeOut 1s linear both;
	-o-animation: fadeOut 1s linear both;
	-ms-animation: fadeOut 1s linear both;
	animation: fadeOut 1s linear both;
}

/*Overgang mellem slidene*/

@-webkit-keyframes roll{
	0% {-webkit-transform: translateX(500px) rotate(360deg);}
	100% {-webkit-transform: translateX(0px) rotate(0deg);}
}
@-moz-keyframes roll{
	0% {-moz-transform: translateX(500px) rotate(360deg); opacity: 0;}
	100% {-moz-transform: translateX(0px) rotate(0deg); opacity: 1;}
}
@-o-keyframes roll{
	0% {-o-transform: translateX(500px) rotate(360deg); opacity: 0;}
	100% {-o-transform: translateX(0px) rotate(0deg); opacity: 1;}
}

@keyframes roll{
	0% {transform: translateX(500px) rotate(360deg); opacity: 0;}
	100% {transform: translateX(0px) rotate(0deg); opacity: 1;}
}

/*secound slide overgang*/
@-webkit-keyframes moveUp{
	0% {-webkit-transform: translateY(40px);}
	100% {-webkit-transform: translateY(0px);}
}
@-moz-keyframes moveUp{
	0% {-moz-transform: translateY(40px);}
	100% {-moz-transform: translateY(0px);}
}
@-o-keyframes moveUp{
	0% {-o-transform: translateY(40px);}
	100% {-o-transform: translateY(0px);}
}

@keyframes moveUp{
	0% {transform: translateY(40px);}
	100% {transform: translateY(0px);}
}

/*thirth slide overgang*/
@-webkit-keyframes fadeIn{
	0% {opacity: 0;}
	100% {opacity: 1;}
}
@-moz-keyframes fadeIn{
	0% {opacity: 0;}
	100% {opacity: 1;}
}
@-o-keyframes fadeIn{
	0% {opacity: 0;}
	100% {opacity: 1;}
}

@keyframes fadeIn{
	0% {opacity: 0;}
	100% {opacity: 1;}
}

/*Forth slide overgang*/
@-webkit-keyframes scaleDown{
	0% {-webkit-transform: scale(1);}
	100% {-webkit-transform: scale(0.5);}
}
@-moz-keyframes scaleDown{
	0% {-moz-transform: scale(1);}
	100% {-moz-transform: scale(0.5);}
}
@-o-keyframes scaleDown{
	0% {-o-transform: scale(1);}
	100% {-o-transform: scale(0.5);}
}

@keyframes scaleDown{
	0% {transform: scale(1);}
	100% {transform: scale(0.5);}
}

/*Fifth slide overgang*/
@-webkit-keyframes fadeOut{
	0% {opacity: 1;}
	100% {opacity: 0;}
}
@-moz-keyframes fadeOut{
	0% {opacity: 1;}
	100% {opacity: 0;}
}
@-o-keyframes fadeOut{
	0% {opacity: 1;}
	100% {opacity: 0;}
}

@keyframes fadeOut{
	0% {opacity: 1;}
	100% {opacity: 0;}
}


/* Media Queries for custom slider */

@media screen and (max-width: 660px) {
	.demo-1 .deco {
		width: 130px;
		height: 130px;
		margin-left: -65px;
		margin-bottom: 50px;
	}

	.demo-1 [data-icon]:after {
		width: auto;
		height: 110px;
		line-height: 110px;
		font-size: 40px;
		margin: -55px 0 0 -55px;
	}

	.demo-1 .sl-slide blockquote {
		margin-bottom: -120px;
	}

	.demo-1 .sl-slide h2 {
		line-height: 22px;
		font-size: 18px;
		margin-bottom: -40px;
		letter-spacing: 8px;
	}

	.demo-1 .sl-slide blockquote p:before {
		line-height: 10px;
		width: 40px;
		height: 40px;
		font-size: 120px;
		left: -45px;
	}

	.demo-2 .sl-slider-wrapper {
		height: 500px;
	}

	.demo-2 .sl-slider h2 {
		font-size: 36px;
	}

	.demo-2 .sl-slider blockquote {
		font-size: 16px;
	}
	.demo-1 .sl-slider-wrapper {
	position: absolute;
	width: 100%;
	height: 80%; /*Kontrollere højden på slideshowet*/
	left: 0;
    top: 1100px;	
}

}

/*Since we will make a reusable plugin out of this we don’t want the slider to be fullscreen by default. So, we won’t set the default style of the wrapper to 100% width and height but to this:*/
.sl-slider-wrapper {
	width: 800px;
	height: 400px;
	margin: 0 auto;
	position: relative;
	overflow: hidden;
}
/*The slider will be of position absolute and we’ll set the top and left to zero. The width and height will be set dynamically with JavaScript.
The slides, the dyamic wrapper and the inner part will all need absolute positioning and they’ll have a width and height of 100%:*/
.sl-slider {
	position: absolute;
	top: 0;
	left: 0;
}

/* Slide wrapper and slides */

.sl-slide,
.sl-slides-wrapper,
.sl-slide-inner {
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
} 
/*Each slide should have a z-index of 1; we’ll control the appearance and the stacking of the slides with JavaScript:*/
.sl-slide {
	z-index: 1;
}

/*The content “slices” will be positioned absolutely and their common style is the following:*/
/* The duplicate parts/slices */

.sl-content-slice {
	overflow: hidden;
	position: absolute;
	-webkit-box-sizing: content-box;
	-moz-box-sizing: content-box;
	box-sizing: content-box;
	background: #fff;
	-webkit-backface-visibility: hidden;
	-moz-backface-visibility: hidden;
	-o-backface-visibility: hidden;
	-ms-backface-visibility: hidden;
	backface-visibility: hidden;
	opacity : 1;
}

/*We use box-sizing: content-box here because by default we use border-box .
The content “slices” will be horizontal or vertical, meaning that either the height or the width will be half of the screensize. In order to avoid seeing the edges of a slice when we rotate it, we’ll add some paddings.*/
/* Horizontal slice */

.sl-slide-horizontal .sl-content-slice {
	width: 100%;
	height: 50%;
	left: -200px;
	-webkit-transform: translateY(0%) scale(1);
	-moz-transform: translateY(0%) scale(1);
	-o-transform: translateY(0%) scale(1);
	-ms-transform: translateY(0%) scale(1);
	transform: translateY(0%) scale(1);
}

.sl-slide-horizontal .sl-content-slice:first-child {
	top: -200px;
	padding: 200px 200px 0px 200px;
}

.sl-slide-horizontal .sl-content-slice:nth-child(2) {
	top: 50%;
	padding: 0px 200px 200px 200px;
}

/* Vertical slice */

.sl-slide-vertical .sl-content-slice {
	width: 50%;
	height: 100%;
	top: -200px;
	-webkit-transform: translateX(0%) scale(1);
	-moz-transform: translateX(0%) scale(1);
	-o-transform: translateX(0%) scale(1);
	-ms-transform: translateX(0%) scale(1);
	transform: translateX(0%) scale(1);
}

.sl-slide-vertical .sl-content-slice:first-child {
	left: -200px;
	padding: 200px 0px 200px 200px;
}

.sl-slide-vertical .sl-content-slice:nth-child(2) {
	left: 50%;
	padding: 200px 200px 200px 0px;
}

/*We use negative position values in order to “pull” the divisions into place.
Let’s style the content wrapper and the content division:*/
/* Content wrapper */
/* Width and height is set dynamically */
.sl-content-wrapper {
	position: absolute;
}

.sl-content {
	width: 100%;
	height: 100%;
	background: #fff;
}

/* Default styles for background colors */
.sl-slide-horizontal .sl-slide-inner {
	background: #ddd;
}

.sl-slide-vertical .sl-slide-inner {
	background: #ccc;
}


/*Navigation*/
header {
  background: white;
  text-align: center;
  z-index: 999;
top:0%;
  width: 100%;
	box-shadow: 1px 1px 5px 1px lightgrey;
}
@media screen and (max-width: 760px) {
	header {
		position: fixed;
		height: 55px;
		width: 200px;
		box-shadow: none;
		background-color: transparent;
	}
	.logo {
		display: none;
	}
}
.logo img{
	height: 80px;
	width: auto;
}
.nave-toggle {
  position: absolute !important;
  top: -9999px !important;
  left: -9999px !important;
}

.nave-toggle:focus ~ .nave-toggle-label {
  outline: 3px solid rgba(lightblue, .75);
}

.nave-toggle-label {
  position: absolute;
  top: 0;
  left: 0;
  margin-left: 1em;
  height: 100%;
  display: flex;
  align-items: center;
}

.nave-toggle-label span,
.nave-toggle-label span::before,
.nave-toggle-label span::after {
  display: block;
  background: black;
  height: 2px;
  width: 2em;
  border-radius: 2px;
  position: relative;
}

.nave-toggle-label span::before,
.nave-toggle-label span::after {
  content: '';
  position: absolute;
}

.nave-toggle-label span::before {
  bottom: 7px;
}

.nave-toggle-label span::after {
  top: 7px;
}

.nave {
  position: absolute;
  text-align: left;
  top: 100%;
  left: 0;
  background: white;
  width: 100%;
  transform: scale(1, 0);
  transform-origin: top;
  transition: transform 400ms ease-in-out;
}

.nave ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
@media screen and (max-width: 1300px) {
	.nave ul {
		max-width: 600px;
	}

}

.nave li {
  margin-bottom: 1em;
  margin-left: 1em;
}

.nave a {
  color: black;
  text-decoration: none;
  font-size: 0.8rem;
  text-transform: uppercase;
  opacity: 0;
  transition: opacity 150ms ease-in-out;
}
@media screen and (max-width: 1300px) {
	.nave a {
		font-size: 0.8em;
	}
}
.nave a:hover {
  color: black;
}

.nave-toggle:checked ~ .nave {
  transform: scale(1,1);
}

.nave-toggle:checked ~ .nave a {
  opacity: 1;
  transition: opacity 250ms ease-in-out 250ms;
}

@media screen and (min-width: 800px) {
  .nave-toggle-label {
    display: none;
  }

  header {
    display: grid;
	grid-template-columns: 1fr auto minmax(600px, 3fr) 1fr;
  }

  .logo {
    grid-column: 1 / 3;


  }
	.logo img {
		height: 70px;
		padding-top: 10px;
	}

  .nave {
    all: unset;
    position: relative;
    text-align: left;
    transition: none;
    transform: scale(1,1);
    background: none;
    top: initial;
    left: initial;
    /* end Edge support stuff */

    grid-column: 3,4 / 4;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

 .nave ul {
    display: flex;
  }

  .nave li {
    margin-left: 3em;
    margin-bottom: 0;
  }

 .nave a {
    opacity: 1;
    position: relative;
  }

  .nave a::before {
    content: '';
    display: block;
    height: 5px;
    background: black;
    position: absolute;
    bottom: -.75em;
    left: 0;
    right: 0;
    transform: scale(0, 1);
    transition: transform ease-in-out 250ms;
  }

  .nave a:hover::before {
    transform: scale(1,1);
  }
}

.footer-distributed{
	position: absolute;
    top: 2800px;
	bottom: auto;
}
@media screen and (max-width: 660px) {
	.footer-distributed{
		top: 1800px;
		
	}
	
}





